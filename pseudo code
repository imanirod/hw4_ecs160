includes:
-string.h (HUZZAH)
-file.h? (unsure of name)

***

#include stdio.h;
#include stdlib.h;

***

varaibles:
-dictionary array [20000][MAX_NAME_LENGTH], (init it null?)
-count array [20000], intitalize to 0
-highest_count array [10], init to 0
-int name_index, init to 0
-int valid_commas, init to 0
-int last_valid_tweeter_index, init to 0

***

//  make array of strings for tweeter names
int MAX_TWEETERS = 20000;
int MAX_TWEETER_NAME_LENGTH = 20;
char dictionary[MAX_TWEETERS][MAX_TWEETER_NAME_LENGTH];
int count[MAX_TWEETERS];
int last_valid_tweeter_index = 0;

// initialise the tweeter counts to zero
for(int i = 0; i < MAX_TWEETERS; i++) {
  count[i] = 0;
}

***

order:
1. open file from command line arguments

***

// read in file
FILE * f = fopen(filename, 'r');

// CHECK: does file exist?
if(f == NULL) {
  printf("Invalid Input CSV\n");
  return 0;
}

***

2. read in the header line
  - first line until \n using string tok
  - valid_commas = (increment for each comma on header line) - 1
  - name_index = valid_commas when token = "name"
  
***

// read in the first line of the file
char line[MAX_TWEETER_NAME_LENGTH] = "";
fgets(line, MAX_TWEETER_NAME_LENGTH,f);
char token[MAX_TWEETER_NAME_LENGTH] = "";
token = strtok(line,",");

int numHeaders = 0;
int name_index = 0;

while(token != NULL) {
  if (token == nameHeader)
    name_index = numHeaders;
  numHeaders++;
  token = strtok(NULL,","); // keep going thorugh line until we hit the null character
}

// now we have the number of headers

***
RESUME HERE
3.get tweeters for rest of file
  - string tok and take name_index token
  - search dictionary for string
      - if in dictionary, increment matching index of count array
      - else add to dictionary at last_valid_tweeter_index+1
      
// parse the rest of the file.
// jumpstart the loop
fgets(line,MAX_TWEETER_NAME_LENGTH,f);

// Loop thorugh file
while(line != NULL) {
  // read in a token
  token = strtok(line, ",");
  int num_toks_in_line = numHeaders;
  int num_tok = 0;
  
  // while there's still tokens available, and there aren't too many tokens
  while(token != NULL && num_toks_in_line > 0) { 
    if(num_tok == nameHeader) { // i.e. we've hit the right column
      // try to find name in dictionary
      int found = find(dictionary,token); // not found = -1, found = num >= 0.  IMPLEMENT THIS, THIS IS PSEUDOCODE
      
      if(found >= 0) {
        // if in dictionary, increment matching index of count array
        count[found]++;
      }
      else {
        // else add to dictionary at last_valid_tweeter_index+1
        dictionary[last_valid_tweeter_index+1] = token;
        last_valid_tweeter_index++;
      } // end else
    } // end if
  } // end inner while
  
  // Read in next line
  fgets(line,MAX_TWEETER_NAME_LENGTH,f);
} // end outer while
      
*** 
    
4. search count array for highest values (somehow)
  - put first 10 into count array
  - for rest compare to 10th count
      - if higher move all elements to place new index
      -else move on
      
  int highest[10] = {-1}; //this holds the index not the count
	int curr_index = 0
	int i = 0;

	highest[0] = 0
	for(i = 1, i < 9, i++)//check bounds
	{
		if(counts[highest[curr_index]] < counts[i])
			\\shift array elements possibly in a seperate sort function
		else 
			highest[curr_index+1] = i
		curr_index++;
	}

	for(i = 9, i < max_valid, i++)//check bounds
	{
		if(counts[highest[9]] < counts[i])
			\\shift array elements
		else
			continue
	}
 
***

5. print array of top 10 tweeters and their tweet counts
6. return 0

TO DO:
find places for possible errors or failures
  
